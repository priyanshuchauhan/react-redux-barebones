{"version":3,"sources":["reducers/rootReducer.js","reducers/fooReducer.js","store.js","containers/HomePage.js","actions/fooAction.js","App.js","serviceWorker.js","index.js"],"names":["combineReducers","foo","state","arguments","length","undefined","action","type","name","payload","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","HomePage","_this$props","this","props","updateBarData","react_default","a","createElement","onClick","Component","connect","dispatch","data","barAction","App","className","containers_HomePage","Boolean","location","hostname","match","ReactDOM","render","es","store","createStore","rootReducer","applyMiddleware","thunk","configureStore","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAGeA,cAAgB,CAC3BC,ICJW,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnC,OAAQC,EAAOC,MACX,IAAK,aACD,MAAO,CACHC,KAAMF,EAAOG,SAErB,QACI,OAAOP,MCHbQ,EAAkBC,OAAOC,sCAAwCC,iDCCjEC,0LACO,IAAAC,EAC2BC,KAAKC,MAA7BT,EADHO,EACGP,KAAMU,EADTH,EACSG,cACd,OACIC,EAAAC,EAAAC,cAAA,+BACsBb,EAClBW,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMJ,EAAc,eAArC,eANOK,cA0BRC,cAdS,SAACtB,GAErB,MAAO,CACHM,KAFaN,EAAMD,IAAfO,OAMe,SAACiB,GAIxB,MAAO,CAAEP,cAHa,SAACQ,GACnBD,ECnBiB,SAACC,GACtB,MAAO,CACHnB,KAAM,aACNE,QAASiB,GDgBAC,CAAUD,OAKZF,CAA6CV,GEf7Cc,mLAVX,OACET,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAA,UAAQQ,UAAU,cAChBV,EAAAC,EAAAC,cAACS,EAAD,CAAUtB,KAAM,oBALRe,aCQEQ,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACLjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAUC,MLHC,WACd,OADuDnC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAChDoC,YACLC,EACA9B,EAAgB+B,YAAgBC,OKAdC,IACbxB,EAAAC,EAAAC,cAACuB,EAAD,OAEJC,SAASC,eAAe,SDqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bef254ae.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\nimport fooReducer from './fooReducer';\r\n\r\nexport default combineReducers({\r\n    foo: fooReducer\r\n});","export default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case 'BAR_ACTION':\r\n            return {\r\n                name: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function configureStore(initialState={}) {\r\n return createStore(\r\n   rootReducer,\r\n   composeEnhancer(applyMiddleware(thunk))\r\n );\r\n}","\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { barAction } from '../actions/fooAction'\r\n\r\nclass HomePage extends Component {\r\n    render() {\r\n        const { name, updateBarData } = this.props;\r\n        return (\r\n            <div>\r\n                Smart Container: {name}\r\n                <button onClick={() => updateBarData('Priyanshu')}>Bar</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { name } = state.foo;\r\n    return {\r\n        name\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    const updateBarData = (data) => {\r\n        dispatch(barAction(data))\r\n    };\r\n    return { updateBarData };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","export const simpleAction = () => dispatch => {\r\n    dispatch({\r\n        type: 'SIMPLE_ACTION',\r\n        payload: 'result_of_simple_action'\r\n    })\r\n}\r\n\r\nexport const barAction = (data) => {\r\n    return {\r\n        type: 'BAR_ACTION',\r\n        payload: data\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport HomePage from './containers/HomePage'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <HomePage name={'Narcos'}/>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from './store';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={configureStore()}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}